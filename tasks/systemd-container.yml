---
# deploy-app:
# takes an "app" dict (defined in vars) and deploys systemd files for it, then starts it
- name: deploy group
  group:
    name: deploy
    gid: 7000
    state: present
- name: 'create defined config dir'
  file:
    path: "{{ container_config_dir }}"
    owner: root
    group: deploy
    mode: 770
    state: directory
- name: 'create per deployed application directory, allowing for unique settings per container'
  file:
    path: "{{ container_config_dir }}{{ deploy_app.name }}/{{ deploy_app.host_port }}"
    owner: root
    group: deploy
    mode: 770
    state: directory
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'unique container environment file'
  template:
    src: container-environment
    dest: "{{ container_config_dir }}{{ deploy_app.name }}/{{ deploy_app.host_port }}.container_environment"
    owner: 'root'
    group: 'deploy'
    mode: 0660
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'container labels'
  template:
    src: container.label
    dest: "{{ container_config_dir }}{{ deploy_app.name }}/{{ deploy_app.host_port }}.label"
    owner: 'root'
    group: 'deploy'
    mode: 0660
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'add block file'
  file:
    path: "{{ container_config_dir }}{{ deploy_app.name }}/{{ deploy_app.host_port }}__block"
    owner: root
    group: root
    mode: 400
    state: touch
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app

- name: 'clean stale and dead/inactive containers'
  template:
    src: container-cleaner.service
    dest: /etc/systemd/system/
    owner: 'root'
    group: 'deploy'
    mode: 0660
- name: 'clean containers'
  systemd:
    daemon_reload: yes
    name: container-cleaner.service
    state: restarted
    enabled: yes #not needed since these machines should not reboot
- name: 'systemd target for running containers'
  template:
    src: container-run-all.target
    dest: /etc/systemd/system/
    owner: 'root'
    group: 'deploy'
    mode: 0660


- name: 'debug systemd unit'
  block:
    - name: 'add block file'
      file:
        path: "/etc/systemd/system/{{ deploy_app.name }}--{{ deploy_app.host_port }}.service.d"
        owner: root
        group: root
        mode: 774
        state: directory
      loop: "{{ container_chalk }}"
      loop_control:
        loop_var: deploy_app
    - name: skel create .vimrc, for new accounts
      copy:
        owner: root
        group: root
        mode: 0644
        dest: "/etc/systemd/system/{{ deploy_app.name }}--{{ deploy_app.host_port }}.service.d/50-debug.conf"
        content: | 
          [Service]
          Environment=SYSTEMD_LOG_LEVEL=debug
      loop: "{{ container_chalk }}"
      loop_control:
        loop_var: deploy_app
  when: debug_systemd is defined
- name: "systemd unit to monitor unique app configuration directory, reload if changed"
  template:
    src: container-config.path
    dest: "/etc/systemd/system/{{ deploy_app.name }}--{{ deploy_app.host_port }}.path"
    owner: 'root'
    group: 'deploy'
    mode: 0660
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'Unique systemd unit, runs the container'
  template:
    src: container-run.service
    dest: "/etc/systemd/system/{{ deploy_app.name }}--{{ deploy_app.host_port }}.service"
    owner: 'root'
    group: 'deploy'
    mode: 0664
  register: app_systemd_unit
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'start app container service'
  systemd:
    daemon_reload: yes
    name: "{{ deploy_app.name }}--{{ deploy_app.host_port }}.service"
    state: restarted
    enabled: yes 
  when: app_systemd_unit.changed #no need to restart a non-changed unit file, TODO: add support for config files/path changed
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: "start the config watcher path unit"
  systemd:
    name: "{{ deploy_app.name }}--{{ deploy_app.host_port }}.path"
    state: started
    enabled: yes #not needed since these machines should not reboot
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: 'set default target'
  command: 'systemctl set-default  container-run-all.target'
  tags:
    - image_build
- name: check container readiness
  shell: "{{ deploy_app.readiness_external_cmd | replace('__self__', '127.0.0.1:' + deploy_app.host_port ) }}"
  when: deploy_app.readiness_external_cmd is defined
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
- name: check internal readiness, is primary port actively listening
  shell: "ss -ntlp |grep {{ deploy_app.host_port }} || echo port {{ deploy_app.host_port }} failed"
  loop: "{{ container_chalk }}"
  loop_control:
    loop_var: deploy_app
  register: port_status

    # TODO: this is a check on the machine for i in $(ls /etc/systemd/system/*service |egrep -o '[0-9][0-9]+'); do ss -ntlp |grep $i || echo "port $i failed" ;done
    # TODO: add pre-flight check of options pulling from man page
    #- name: 'it would be good to know what ports are actively used, this is an orchisstration concern register active ports new is: {{ ansible_facts.tcp_listen }}'
    #shell: ss -ltnH sport ge 33000 |awk '{ sub(".*:","",$4); print $4}'
    #register: detected_app_ports
  #- name: 'auto reload on path'
  #shell: sha1sum /usr/local/var/lib/containers/{{ deploy_app.name }}/* > /usr/local/var/lib/containers/{{ deploy_app.name }}.sha1sums

