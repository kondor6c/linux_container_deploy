---
#- name: never modify an already mounted device or existing filesystem 
#  assert:
#    that: ansible_mounts | selectattr('device', 'equalto', container_block_device) | list | length > 0
#    msg: "already mounted"
#  loop: "{{ ansible_mounts }}"
#  loop_control:
#    loop_var: disk
- name: xfs for the container storage
  block:
    - name: 'we ensure that we are not formatting an existing, mounted filesystem'
      filesystem:
        fstype: xfs
        dev: "/dev/{{ container_block_device }}"
        opts:  -n ftype=1
      when: (ansible_mounts | selectattr('device', 'equalto', "/dev/" + disk.key) | list | length < 1 ) and disk.key == container_block_device
      loop: "{{ ansible_devices | dict2items }}"
      register: formatted
      loop_control:
        loop_var: disk
      tags:
        - storage

    - name: mount storage
      mount:
        path: /var/lib/containers
        state: mounted
        fstype: xfs
        opts: noatime
        src: "/dev/{{ container_block_device }}"
      when: disk.changed |bool
      loop: "{{ formatted.results }}"
      loop_control:
        loop_var: disk
      tags:
        - storage
  when: container_block_device is defined
#- name: pull the images
#  shell: "{{ container_engine }} pull {{ c.registry_host }}/{{ c.project }}/{{ c.container_image_name }}:{{ c.container_image_version_tag }}"
#  tags:
#    - intensive
#  when: container_chalk is defined 
#  loop: "{{ container_chalk }}"
#  loop_control:
#    loop_var: c
#  tags:
#    - image_build
#    - async_TODO
# https://github.com/NotGlop/docker-drag/blob/master/docker_pull.py

- name: cache containers at image build, then move them at runtime
  template:
    src: container-cache.service
    dest: /etc/systemd/system/
    owner: 'root'
    group: 'deploy'
    mode: 0660
    #- name: set volumes
    #  set_fact:
    #    obj: >- 
    #      {% if ansible_loop.first %}[
    #      {% else %}
    #      {{ obj }}
    #      {% endif %}
    #      {% if i['option_map']['volume'] is defined %}
    #      {% for v in i.option_map.volume %}
    #      { "host": "{{ v.split(':')[0] }}",
    #      {% set host = v.split(':')[0] %}
    #      "container": "{{ v.split(':')[1] }}",
    #      {% set container = v.split(':')[1] %}
    #      {% if v.split(':') | length >= 3 %}
    #      {% set opts =  v.split(':')[2] %}
    #      "opts": "{{ v.split(':')[2] }}"
    #      {% else %}
    #      "opts": "" 
    #      {% endif -%}},{% endfor %}{% else %} {% endif %}
    #      {% if ansible_loop.last %}]{% endif %}
    #    vol_map: >- 
    #      {% if ansible_loop.first %}{% set m = { 'v': []} %}
    #      {% endif %}
    #      {% if i['option_map']['volume'] is defined %}
    #      {% for v in i.option_map.volume %}
    #      {% set host =  v.split(':')[0] %}
    #      {% set container = v.split(':')[1] %}
    #      {% if v.split(':') | length >= 3 %}
    #      {% set opts =  v.split(':')[2] %}
    #      {% else %}
    #      {% set opts = ''  %}
    #      {% endif -%}{% set m  = m | combine( { 'host': host, 'container': container, 'opts': opts} ) %}{% endfor %}{% else %} {% endif %}
    #      {% if ansible_loop.last %}{{ m.v |to_json }} {% endif %}
    #  loop: "{{ container_chalk }}"
    #  loop_control:
    #    label: "{{ i.name }}"
    #    extended: yes
    #    loop_var: i
###
# due to all of this, specifying option_map AND volume is required... sucks, but now directories are properly chowned with automation
# I had tried to compose a new volume map above to work around this, but its complicated...
# This is also where we might set each container's SELinux MCS, which would use the port (pretty much the unique number for the container on the host)
###

- name: "create volume dirs with specified UID designated by '=' "
  file:
    owner: "{{ v.1.split(':')| last | regex_replace('[a-zA-Z=,/_-]+', '') | default('root') }}"
    group: "{{ v.1.split(':')| last | regex_replace('[a-zA-Z=,/_-]+', '') | default('deploy') }}"
    path: "{{ v.1.split(':')[0] }}"
    setype: container_file_t  #only type that is writeable by containers, we specify it here in order to help cement setting setypes everytime we set the mode or owner!
    # If you  volume mount in a directory into  a container and add a :z or :Z the container engines relabeled the content under the volumes to container_file_t
    mode: 0775
    state: directory
  loop: "{{ container_chalk |map(attribute='option_map')| list |subelements('volume') }}"
  when: v.1 |regex_search('=' | string)
  register: uid_container_path
  loop_control:
    label: "{{ v.1.split(':') }}"
    loop_var: v

- name: create volume dirs, when NO UID is specified (previous directory fails)
  file:
    owner: 'root'
    group: 'deploy'
    path: "{{ each_container_volume.1.split(':')[0] }}"
    setype: container_file_t
    mode: 0775
    state: directory
  loop: "{{ container_chalk |map(attribute='option_map') | list |subelements('volume') }}"
  when: not ( each_container_volume.1 |regex_search('=' | string) )
  loop_control:
    loop_var: each_container_volume
    #WORKING! = loop: "{{ container_chalk |map(attribute='option_map')| list |subelements('volume') }}"

    #  |product(option_map.volume "defined") | subelements('volume') }}"
    #loop: "{{ container_chalk| flatten |select('option_map') |subelements(option_map.volume) }}"
    #loop: "{{ container_chalk |select('option_map')|subelements('volume') }}"

